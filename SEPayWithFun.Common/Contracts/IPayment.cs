//@GeneratedCode
/*****************************************************************************************
  Please note that this file is regenerated each time it is generated
  and all your changes will be overwritten in this file.
  If you still want to make changes, you can do this in 2 ways:
  
  1. Use a 'partial class name' according to the following pattern:
  
  #if GENERATEDCODE_ON
  namespace_name {
    partial class ClassName
    {
      partial void BeforeExecute(ref bool handled)
      {
        //... do something
        handled = true;
      }
    }
   }
  #endif
  
  2. Change the label //@GeneratedCode to //@CustomizedCode, for example.
     Alternatively, you can also remove the label or give it a different name.
*****************************************************************************************/
namespace SEPayWithFun.Common.Contracts
{
    /// <summary>
    /// Generated by the generator.
    /// </summary>
    public partial interface IPayment : CommonContracts.IVersionable
    {
        System.String CardNumber { get; set; }
        System.DateTime ExecutionDate { get; set; }
        System.DateTime TurnoverTime { get; set; }
        System.String DealerName { get; set; }
        System.String DealerLocation { get; set; }
        System.Decimal Turnover { get; set; }
        System.String? Note { get; set; }
        /// <summary>
        /// Copies the properties of another object to this instance.
        /// </summary>
        /// <param name="other">The object to copy the properties from.</param>
        void CopyProperties(IPayment other)
        {
            bool handled = false;
            BeforeCopyProperties(other, ref handled);
            if (handled == false)
            {
                ((CommonContracts.IVersionable)this).CopyProperties(other);
                CardNumber = other.CardNumber;
                ExecutionDate = other.ExecutionDate;
                TurnoverTime = other.TurnoverTime;
                DealerName = other.DealerName;
                DealerLocation = other.DealerLocation;
                Turnover = other.Turnover;
                Note = other.Note;
            }
            AfterCopyProperties(other);
        }
        /// <summary>
        /// This method is called before copying the properties of another object to the current instance.
        /// </summary>
        /// <param name="other">The object to copy the properties from.</param>
        /// <param name="handled">A boolean value that indicates whether the method has been handled.</param>
        partial void BeforeCopyProperties(IPayment other, ref bool handled);
        /// <summary>
        /// This method is called after copying properties from another instance of the class.
        /// </summary>
        /// <param name="other">The other instance of the class from which properties were copied.</param>
        partial void AfterCopyProperties(IPayment other);
    }
}
